/**
 * Program to solve the 2 sum problem
 * Problem statement - Given an array of integers, find two numbers such that they add up to a specific target number
 * Variation to this is to return all the pairs of integers in an integer array who sum up to the target value
 * 
 **/
 
 
 public int[] findPairWithSum(int[] array, int target) {
		int[] result = new int[2];
		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
		for(int i=0; i<array.length; i++) {
			int difference = target - array[i];
			if(map.containsKey(array[i])) {
				result[0] = map.get(array[i]);
				result[1] = i;
			} else {
				map.put(difference, i);
			}
		}
		return result;
	}
}

//Given two unsorted arrays, find all pairs whose sum is x: 

  public static void findPairs(int arr1[], int arr2[],
                                 int n, int m, int x)
    {
        // Insert all elements of first array in a hash
        HashMap<Integer, Integer> s = new HashMap<Integer, Integer>();
         
        for (int i = 0; i < n; i ++)
            s.put(arr1[i], 0);
      
        // Subtract sum from second array elements one
        // by one and check it's present in array first
        // or not
        for (int j = 0; j < m; j ++)
            if (s.containsKey(x - arr2[j]))
                System.out.println(x - arr2[j] + " " + arr2[j]);             
    }
     
    /* Driver program to test above function */
    public static void main(String[] args) 
    {
        int arr1[] = {1, 0, -4, 7, 6, 4};
        int arr2[] = {0 ,2, 4, -3, 2, 1};
        int x = 8;
         
        findPairs(arr1, arr2, arr1.length, arr2.length, x);
      
    }

 
